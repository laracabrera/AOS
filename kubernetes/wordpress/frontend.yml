# Primero el template del Servicio
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  labels:
    app: wordpress
spec:
  ports:
    - port: 80    # Daremos servicio en el puerto 80
  selector:
    app: wordpress
    tier: frontend
  type: NodePort  # Tipo NodePort para poder acceder desde fuera del cluster
---
# Ahora la configuración del volumen persistente
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wp-pv-claim
  labels:
    app: wordpress
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Por último, el template del despliegue
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  labels:
    app: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
      tier: frontend
  replicas: 1
  template:
    metadata:
      labels:
        app: wordpress
        tier: frontend
    spec:
      containers:
      - image: wordpress:5-php7.2-apache
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: wordpress-mysql        # Este es el valor del metadato name del servicio de la base de datos
        - name: WORDPRESS_DB_USER
          value: wp
        - name: WORDPRESS_DB_PASSWORD
          value: wp12345
        - name: WORDPRESS_DB_NAME
          value: db_wordpress
        ports:
        - containerPort: 80
          name: wordpress
        volumeMounts:
        - name: wordpress-persistent-storage   # Este es el nombre del volumen a usar...
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage # ...que queda definido aquí, además indicando que es persistente...
        persistentVolumeClaim:
          claimName: wp-pv-claim   # ...según el PersistentVolumeClaim definido anteriormente con este nombre